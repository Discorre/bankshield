{"ast":null,"code":"// import React, { useState, useEffect, useLocation } from 'react';\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// import Header from './components/Header';\n// import AdminHeader from './admin/components/AdminHeader';\n// import Home from './pages/Home';\n// import Login from './pages/Login';\n// import Register from './pages/Register';\n// import Cart from './pages/Cart';\n// import ServiceDetails from './pages/ServiceDetails';\n// import InnerApp from './InnerApp';\n// import ChangePassword from './pages/ChangePassword';\n// import ProtectedRoute from \"./components/ProtectedRoute\";\n// import PublicOnlyRoute from \"./components/PublicOnlyRoute\"\n// import AdminLogin from './admin/pages/AdminLogin';\n// import AdminProductList from './admin/pages/AdminProductList';\n// import { ClipLoader } from 'react-spinners';\n// import api from './api/api';\n\n// export const CartContext = React.createContext();\n\n// function App() {\n//   const [cartItems, setCartItems] = useState([]);\n//   const [user, setUser] = useState(null);\n//   const [token, setToken] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const location = useLocation();\n//   const isAdminRoute = location.pathname.startsWith('/admin');\n\n//   const API_URL = process.env.REACT_APP_API_URL;\n\n//   useEffect(() => {\n//     setTimeout(() => {\n//       const savedUser = localStorage.getItem('user');\n//       const savedToken = localStorage.getItem('token');\n//       if (savedUser && savedToken) {\n//         setUser(JSON.parse(savedUser));\n//         setToken(savedToken);\n//       }\n//       setLoading(false);\n//     }, 1000);\n//   }, []);\n\n//   const saveAuth = (userData, jwt) => {\n//     setUser(userData);\n//     setToken(jwt);\n//     localStorage.setItem('user', JSON.stringify(userData));\n//     localStorage.setItem('token', jwt);\n//   };\n\n//   const logout = async () => {\n//     try {\n//       await api.post(`${API_URL}/logout`, {}, {\n//         headers: {\n//           'refresh-token': localStorage.getItem('refreshToken')\n//         }\n//       });\n\n//       localStorage.removeItem('accessToken');\n//       localStorage.removeItem('user');\n\n//       window.location.href = '/';\n//     } catch (error) {\n//       console.error('Ошибка при выходе:', error.response?.data || error.message);\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <div className=\"flex justify-center items-center h-screen w-screen fixed top-0 left-0\">\n//         <ClipLoader size={500} color={\"#123abc\"} loading={loading} />\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div data-testid=\"app-root\">\n//       <CartContext.Provider value={{ cartItems, setCartItems, user, token, saveAuth, logout }}>\n//         <Router>\n//           {isAdminRoute ? <AdminHeader /> : <Header />}\n//           <Routes>\n//             <Route path=\"/\" element={<Home />} />\n//             <Route path=\"/service/:id\" element={<ServiceDetails />} />\n\n//             <Route path=\"/login\" element={<PublicOnlyRoute><Login /></PublicOnlyRoute>} />\n//             <Route path=\"/register\" element={<PublicOnlyRoute><Register /></PublicOnlyRoute>} /> \n\n//             <Route path=\"/cart\" element={<ProtectedRoute><Cart /></ProtectedRoute>} />\n//             <Route path=\"/change_password\" element={<ProtectedRoute><ChangePassword /></ProtectedRoute>} />\n\n//             <Route path=\"/admin/login\" element={<AdminLogin />} />\n//             <Route path=\"/admin/products\" element={<AdminProductList />} />\n//           </Routes>\n//         </Router>\n//       </CartContext.Provider>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/home/discorre/vscodeproj/123/bankshield/bankshield-client/src/App.js"],"sourcesContent":["// import React, { useState, useEffect, useLocation } from 'react';\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// import Header from './components/Header';\n// import AdminHeader from './admin/components/AdminHeader';\n// import Home from './pages/Home';\n// import Login from './pages/Login';\n// import Register from './pages/Register';\n// import Cart from './pages/Cart';\n// import ServiceDetails from './pages/ServiceDetails';\n// import InnerApp from './InnerApp';\n// import ChangePassword from './pages/ChangePassword';\n// import ProtectedRoute from \"./components/ProtectedRoute\";\n// import PublicOnlyRoute from \"./components/PublicOnlyRoute\"\n// import AdminLogin from './admin/pages/AdminLogin';\n// import AdminProductList from './admin/pages/AdminProductList';\n// import { ClipLoader } from 'react-spinners';\n// import api from './api/api';\n\n// export const CartContext = React.createContext();\n\n// function App() {\n//   const [cartItems, setCartItems] = useState([]);\n//   const [user, setUser] = useState(null);\n//   const [token, setToken] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const location = useLocation();\n//   const isAdminRoute = location.pathname.startsWith('/admin');\n\n//   const API_URL = process.env.REACT_APP_API_URL;\n\n//   useEffect(() => {\n//     setTimeout(() => {\n//       const savedUser = localStorage.getItem('user');\n//       const savedToken = localStorage.getItem('token');\n//       if (savedUser && savedToken) {\n//         setUser(JSON.parse(savedUser));\n//         setToken(savedToken);\n//       }\n//       setLoading(false);\n//     }, 1000);\n//   }, []);\n\n//   const saveAuth = (userData, jwt) => {\n//     setUser(userData);\n//     setToken(jwt);\n//     localStorage.setItem('user', JSON.stringify(userData));\n//     localStorage.setItem('token', jwt);\n//   };\n\n//   const logout = async () => {\n//     try {\n//       await api.post(`${API_URL}/logout`, {}, {\n//         headers: {\n//           'refresh-token': localStorage.getItem('refreshToken')\n//         }\n//       });\n  \n//       localStorage.removeItem('accessToken');\n//       localStorage.removeItem('user');\n  \n//       window.location.href = '/';\n//     } catch (error) {\n//       console.error('Ошибка при выходе:', error.response?.data || error.message);\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <div className=\"flex justify-center items-center h-screen w-screen fixed top-0 left-0\">\n//         <ClipLoader size={500} color={\"#123abc\"} loading={loading} />\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div data-testid=\"app-root\">\n//       <CartContext.Provider value={{ cartItems, setCartItems, user, token, saveAuth, logout }}>\n//         <Router>\n//           {isAdminRoute ? <AdminHeader /> : <Header />}\n//           <Routes>\n//             <Route path=\"/\" element={<Home />} />\n//             <Route path=\"/service/:id\" element={<ServiceDetails />} />\n\n//             <Route path=\"/login\" element={<PublicOnlyRoute><Login /></PublicOnlyRoute>} />\n//             <Route path=\"/register\" element={<PublicOnlyRoute><Register /></PublicOnlyRoute>} /> \n\n//             <Route path=\"/cart\" element={<ProtectedRoute><Cart /></ProtectedRoute>} />\n//             <Route path=\"/change_password\" element={<ProtectedRoute><ChangePassword /></ProtectedRoute>} />\n\n//             <Route path=\"/admin/login\" element={<AdminLogin />} />\n//             <Route path=\"/admin/products\" element={<AdminProductList />} />\n//           </Routes>\n//         </Router>\n//       </CartContext.Provider>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}